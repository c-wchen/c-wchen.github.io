(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{430:function(a,t,e){"use strict";e.r(t);var r=e(13),v=Object(r.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"深入理解java虚拟机读书笔记"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#深入理解java虚拟机读书笔记"}},[a._v("#")]),a._v(" 深入理解Java虚拟机读书笔记")]),a._v(" "),e("h2",{attrs:{id:"java快速发展的优势"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java快速发展的优势"}},[a._v("#")]),a._v(" Java快速发展的优势")]),a._v(" "),e("ol",[e("li",[e("p",[a._v("一次编写， 多处运行")])]),a._v(" "),e("li",[e("p",[a._v("提供相对安全的内存管理和访问机制，避免绝大部分的内存泄露和指针越界问题")])]),a._v(" "),e("li",[e("p",[a._v("热点代码检测和运行时优化")])]),a._v(" "),e("li",[e("p",[a._v("完善的应用程序接口")])])]),a._v(" "),e("h2",{attrs:{id:"java引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java引用"}},[a._v("#")]),a._v(" Java引用")]),a._v(" "),e("h3",{attrs:{id:"_1-强引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-强引用"}},[a._v("#")]),a._v(" 1.强引用")]),a._v(" "),e("p",[a._v("强引用是最传统的“引用”的定义，是指在程序代码之中普遍存在的引用赋值，即类似“Object obj=new Object()”这种引用关系。无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。")]),a._v(" "),e("h3",{attrs:{id:"_2-软引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-软引用"}},[a._v("#")]),a._v(" 2.软引用")]),a._v(" "),e("p",[a._v("软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。在JDK 1.2版之后提供了SoftReference类来实现软引用。")]),a._v(" "),e("h3",{attrs:{id:"_3-弱引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-弱引用"}},[a._v("#")]),a._v(" 3.弱引用")]),a._v(" "),e("p",[a._v("弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生为止。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK 1.2版之后提供了WeakReference类来实现弱引用。")]),a._v(" "),e("h3",{attrs:{id:"_4-虚引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-虚引用"}},[a._v("#")]),a._v(" 4.虚引用")]),a._v(" "),e("p",[a._v("虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。在JDK 1.2版之后提供了PhantomReference类来实现虚引用。")]),a._v(" "),e("h2",{attrs:{id:"分代收集理论"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分代收集理论"}},[a._v("#")]),a._v(" 分代收集理论")]),a._v(" "),e("ol",[e("li",[a._v("弱分代假说（Weak Generational Hypothesis）：绝大多数对象都是朝生夕灭的。")]),a._v(" "),e("li",[a._v("强分代假说（Strong Generational Hypothesis）：熬过越多次垃圾收集过程的对象就越难以消\n亡。")])]),a._v(" "),e("p",[a._v("这两个分代假说共同奠定了多款常用的垃圾收集器的一致的设计原则：收集器应该将Java堆划分\n出不同的区域，然后将回收对象依据其年龄（年龄即对象熬过垃圾收集过程的次数）分配到不同的区\n域之中存储。")]),a._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[a._v("跨代引用假说（Intergenerational Reference Hypothesis）：跨代引用相对于同代引用来说仅占极\n少数。")])]),a._v(" "),e("h2",{attrs:{id:"清理算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清理算法"}},[a._v("#")]),a._v(" 清理算法")]),a._v(" "),e("ol",[e("li",[a._v("标记-清除")]),a._v(" "),e("li",[a._v("标记-复制")]),a._v(" "),e("li",[a._v("标记-整理")])])])}),[],!1,null,null,null);t.default=v.exports}}]);