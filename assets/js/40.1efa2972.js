(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{271:function(t,e,a){t.exports=a.p+"assets/img/image-20210905143105698.1218ec96.png"},422:function(t,e,a){"use strict";a.r(e);var s=a(13),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("JIT是什么")]),t._v(" "),s("p",[t._v("JIT 是 just in time 的缩写, 也就是即时编译编译器。使用即时编译器技术，能够加速 Java 程序的执行速度。 javac 将程序源代码编译，转换成 java 字节码，JVM 通过解释字节码将其翻译成对应的机器指令，逐条读入，逐条解释翻译。很显然，经过解释执行，其执行速度必然会比可执行的二进制字节码程序慢很多。为了提高执行速度，引入了 JIT 技术。")]),t._v(" "),s("p",[t._v("在运行时 JIT 会把翻译过的机器码保存起来，以备下次使用，因此从理论上来说，采用该 JIT 技术可以接近以前纯编译技术。下面我们看看，JIT 的工作过程。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(271),alt:"image-20210905143105698"}})]),t._v(" "),s("p",[t._v("热点检测方式")]),t._v(" "),s("p",[t._v("1、基于采样的方式探测（Sample Based Hot Spot Detection) ：周期性检测各个线程的栈顶，发现某个方法经常出险在栈顶，就认为是热点方法。好处就是简单，缺点就是无法精确确认一个方法的热度。容易受线程阻塞或别的原因干扰热点探测。")]),t._v(" "),s("p",[t._v("2、基于计数器的热点探测（Counter Based Hot Spot Detection)。采用这种方法的虚拟机会为每个方法，甚至是代码块建立计数器，统计方法的执行次数，某个方法超过阀值就认为是热点方法，触发JIT编译。")]),t._v(" "),s("h2",{attrs:{id:"参考链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[t._v("#")]),t._v(" 参考链接")]),t._v(" "),s("p",[t._v("https://developer.ibm.com/zh/articles/j-lo-just-in-time/")]),t._v(" "),s("p",[t._v("https://zhuanlan.zhihu.com/p/66984952")])])}),[],!1,null,null,null);e.default=n.exports}}]);