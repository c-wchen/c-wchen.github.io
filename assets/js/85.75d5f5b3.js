(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{403:function(v,_,l){"use strict";l.r(_);var i=l(13),t=Object(i.a)({},(function(){var v=this,_=v.$createElement,l=v._self._c||_;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("p",[v._v("图的定义")]),v._v(" "),l("p",[v._v("图（Graph）是由两个集合构成， 一个非空但有限的顶点集合V，另一个是描述顶点之间关系---边的集合E（可以为空）。因此，图可以表示为G=(V, E)。每条边是一顶点对（u,v）且u，v属于V， 通常|V|表示顶点集合， 用|E|表示边的数量。")]),v._v(" "),l("ol",[l("li",[v._v("有向图")]),v._v(" "),l("li",[v._v("无向图")]),v._v(" "),l("li",[v._v("简单图： 无重复边和自回路")]),v._v(" "),l("li",[v._v("邻接点")]),v._v(" "),l("li",[v._v("路径、简单路径、回路、无环图")]),v._v(" "),l("li",[v._v("有向完全图")]),v._v(" "),l("li",[v._v("无向完全图")]),v._v(" "),l("li",[v._v("顶点度、入度、出度")]),v._v(" "),l("li",[v._v("稠密图、稀疏图")]),v._v(" "),l("li",[v._v("权、网图（边上带权的图称为网图")]),v._v(" "),l("li",[v._v("子图")]),v._v(" "),l("li",[v._v("强连通图、强连通分量")]),v._v(" "),l("li",[v._v("连通图、连通分量（无向图的"),l("strong",[v._v("极大连通子图")]),v._v("称为连通分量）\n"),l("ul",[l("li",[v._v("子图：连通分量应该是原图的子图")]),v._v(" "),l("li",[v._v("联通：连通分量本身应该是连通的")]),v._v(" "),l("li",[v._v("极大顶点数： 连通子图含有极大顶点数， 即再加入其他顶点将会导致子图不连通")]),v._v(" "),l("li",[v._v("极大边数: 具有极大顶点数的连通子图包含依附于这些顶点的所有边")])])]),v._v(" "),l("li",[v._v("生成树")]),v._v(" "),l("li",[v._v("生成森林")])]),v._v(" "),l("p",[v._v("图的遍历")]),v._v(" "),l("ol",[l("li",[v._v("深度优先搜索 （先序遍历）")]),v._v(" "),l("li",[v._v("广度优先搜索 （层序遍历）")])]),v._v(" "),l("p",[v._v("最小生成树")]),v._v(" "),l("ol",[l("li",[v._v("普利姆（Prim）")]),v._v(" "),l("li",[v._v("克鲁斯卡尔（Kruskal）")])]),v._v(" "),l("p",[v._v("单源最短路径")]),v._v(" "),l("ol",[l("li",[v._v("Dijkstra算法 迪捷斯卡尔")]),v._v(" "),l("li",[v._v("Floyd算法  弗洛伊德")])]),v._v(" "),l("p",[v._v("拓扑排序： 确定工序的先后次序")]),v._v(" "),l("p",[v._v("关键路径")])])}),[],!1,null,null,null);_.default=t.exports}}]);