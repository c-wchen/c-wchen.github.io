(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{401:function(t,s,r){"use strict";r.r(s);var a=r(13),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h3",{attrs:{id:"定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),r("p",[t._v("数据结构是包含"),r("strong",[t._v("数据对象")]),t._v("在计算机中的"),r("strong",[t._v("组织方式")]),t._v("（链表、图、堆）")]),t._v(" "),r("h3",{attrs:{id:"数据结构与算法的联系"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据结构与算法的联系"}},[t._v("#")]),t._v(" 数据结构与算法的联系")]),t._v(" "),r("p",[t._v("程序=算法+数据结构。数据结构是算法实现的基础，算"),r("strong",[t._v("法总是要依赖于某种数据结构来实现的")]),t._v("。往往是在发展一种算法的时候，构建了适合于这种算法的数据结构。 算法的操作对象是数据结构。算法的设计和选择要同时结合数据结构，简单地说数据结构的设计就是选择存储方式，如确定问题中的信息是用数组存储还是用普通的变量存储或其他更加复杂的数据结构。算法设计的实质就是对实际问题要处理的数据选择一种恰当的存储结构，并在选定的存储结构上设计一个好的算法。不同的数据结构的设计将导致差异很大的算法。数据结构是算法设计的基础。用一个形象的比喻来解释：开采煤矿过程中，煤矿以各种形式深埋于地下。矿体的结构就像相当于计算机领域的数据结构，而煤就相当于一个个数据元素。2开采煤矿然后运输、加工这些“操作”技术就相当于算法。显然，如何开采，如何运输必须考虑到煤矿的存储（物理）结构，只拥有开采技术而没有煤矿是没有任何意义的。算法设计必须考虑到数据结构，算法设计是不可能独立于数据结构的。 另外，数据结构的设计和选择需要为算法服务。如果某种数据结构不利于算法实现它将没有太大的实际意义。知道某种数据结构的典型操作才能设计出好的算法。 算法的设计同时伴有数据结构的设计，两者都是为最终解决问题服务的。")]),t._v(" "),r("p",[r("strong",[t._v("数据结构与算法的区别")]),t._v("\n数据结构关注的是数据的逻辑结构、存储结构以及基本操作，而算法更多的是关注如何在数据结构的基础上解决实际问题。算法是编程思想，数据结构则是这些思想的逻辑基础。")]),t._v(" "),r("p",[t._v("注意： 算法是解决问题的思想（分而治之、回溯、动态规划...）")])])}),[],!1,null,null,null);s.default=n.exports}}]);