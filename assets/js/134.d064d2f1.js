(window.webpackJsonp=window.webpackJsonp||[]).push([[134],{463:function(v,_,t){"use strict";t.r(_);var e=t(13),n=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("p",[v._v("Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。")]),v._v(" "),t("p",[v._v("泛型的"),t("strong",[v._v("本质是参数化类型")]),v._v("，也就是说所操作的数据类型被指定为一个参数。")]),v._v(" "),t("p",[v._v("定义泛型方法的规则：")]),v._v(" "),t("ul",[t("li",[v._v("所有泛型方法声明都有一个类型参数声明部分（由尖括号分隔），该类型参数声明部分在"),t("strong",[v._v("方法返回类型之前")]),v._v("，在"),t("strong",[v._v("类名之后")]),v._v("定义")]),v._v(" "),t("li",[v._v("每一个类型参数声明部分包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。")]),v._v(" "),t("li",[v._v("类型参数能被用来声明返回值类型，并且能作为泛型方法得到的实际参数类型的占位符。")]),v._v(" "),t("li",[v._v("泛型方法体的声明和其他方法一样。注意类型参数只能代表"),t("strong",[v._v("引用型类型")]),v._v("，不能是基本数据类型（像int,double,char的等），可以使用基本类型的包装类（Integer、Double、Character）。")])]),v._v(" "),t("p",[v._v("泛型种类")]),v._v(" "),t("ul",[t("li",[v._v("Java泛型类")]),v._v(" "),t("li",[v._v("Java泛型方法")]),v._v(" "),t("li",[v._v("Java泛型接口")]),v._v(" "),t("li",[v._v("Java泛型擦除及其相关内容")]),v._v(" "),t("li",[v._v("Java泛型通配符")])]),v._v(" "),t("p",[v._v("参考文献")]),v._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.im/post/6844903650788114439",target:"_blank",rel:"noopener noreferrer"}},[v._v("泛型详解"),t("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=n.exports}}]);