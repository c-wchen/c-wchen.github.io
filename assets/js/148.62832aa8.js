(window.webpackJsonp=window.webpackJsonp||[]).push([[148],{480:function(t,e,s){"use strict";s.r(e);var a=s(13),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("在Dockerfile书写中常被CMD和ENTRYPOINT混淆， 下面通过对CMD和ENTRYPOINT测试来展示两者之间的区别")]),t._v(" "),s("h2",{attrs:{id:"命令格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命令格式"}},[t._v("#")]),t._v(" 命令格式")]),t._v(" "),s("blockquote",[s("p",[t._v('exec格式 ["command", "param1", "param2", ..]   (["echo", "-hello world"])')]),t._v(" "),s("p",[t._v('shell格式  command param1 param2 ... (echo "hello world")')])]),t._v(" "),s("h2",{attrs:{id:"区别与联系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#区别与联系"}},[t._v("#")]),t._v(" 区别与联系")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Dockerfile")]),t._v("\nFROM busybox\nCMD "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("编写以上Dockerfile， 执行构建命令命令"),s("code",[t._v("docker build -t test .")]),t._v("  ， 运行"),s("code",[t._v("docker run test")]),t._v(" CMD命令会被运行， 当使用"),s("code",[t._v('docker run test echo "new hello world"')]),t._v("  Dockerfile编写的CMD会被覆盖。")]),t._v(" "),s("p",[t._v("总结： dockerfile是运行容器默认命令， 可以通过在运行时覆盖CMD命令")]),t._v(" "),s("p",[t._v("注意：-t让docker分配一个伪终端并绑定到容器的标准输入上, -i则让容器的标准输入保持打开")]),t._v(" "),s("div",{staticClass:"language-BASH extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Dockerfile")]),t._v("\nFROM busybox\nENTRYPOINT "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nCMD "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HELLO WORLD"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("运行时，会把CMD中的命令作为参数来运行， 效果等同于"),s("code",[t._v('echo "HELLO WORLD"')]),t._v(", 当然也可以使用"),s("code",[t._v("docker run test new hello world")]),t._v(" 替换掉CMD中的参数； 如果把命令改成shell模式，CMD参数会被忽略")]),t._v(" "),s("p",[t._v("总结： 在exec格式下， ENTRYPOINT会把CMD命令作为参数运行， ENTRYPOINT为shell格式时，CMD参数会被忽略")]),t._v(" "),s("p",[t._v("注意：ENTRYPOINT如果使用shell格式会忽略CMD参数， 需要使用exec格式才有效")]),t._v(" "),s("h2",{attrs:{id:"参考文献"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[t._v("#")]),t._v(" 参考文献")]),t._v(" "),s("p",[t._v("https://blog.51cto.com/8869176/2082584")])])}),[],!1,null,null,null);e.default=r.exports}}]);