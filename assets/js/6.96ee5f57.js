(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{349:function(t,a,e){t.exports=e.p+"assets/img/image-20210214202250215.33a3c7f6.png"},350:function(t,a,e){t.exports=e.p+"assets/img/image-20210214202330736.22186681.png"},351:function(t,a,e){t.exports=e.p+"assets/img/image-20210214202358754.ae05eb6f.png"},352:function(t,a,e){t.exports=e.p+"assets/img/image-20210214202416441.d1efba37.png"},353:function(t,a,e){t.exports=e.p+"assets/img/image-20210214202448351.545e12a3.png"},354:function(t,a,e){t.exports=e.p+"assets/img/image-20210214202555529.c09d984f.png"},547:function(t,a,e){"use strict";e.r(a);var s=e(13),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"在-chrome-中调试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在-chrome-中调试"}},[t._v("#")]),t._v(" 在 Chrome 中调试")]),t._v(" "),s("p",[t._v("在编写更复杂的代码前，让我们先来聊聊调试吧。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Debugging",target:"_blank",rel:"noopener noreferrer"}},[t._v("调试"),s("OutboundLink")],1),t._v(" 是指在一个脚本中找出并修复错误的过程。所有的现代浏览器和大多数其他环境都支持调试工具 —— 开发者工具中的一个令调试更加容易的特殊用户界面。它也可以让我们一步步地跟踪代码以查看当前实际运行情况。")]),t._v(" "),s("p",[t._v("在这里我们将会使用 Chrome（谷歌浏览器），因为它拥有足够多的功能，其他大部分浏览器的功能也与之类似。")]),t._v(" "),s("h2",{attrs:{id:"资源-sources-面板"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#资源-sources-面板"}},[t._v("#")]),t._v(" “资源（Sources）”面板")]),t._v(" "),s("p",[t._v("你的 Chrome 版本可能看起来有一点不同，但是它应该还是处于很明显的位置。")]),t._v(" "),s("ul",[s("li",[t._v("在 Chrome 中打开 "),s("a",{attrs:{href:"https://zh.javascript.info/article/debugging-chrome/debugging/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("示例页面"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("li",[t._v("使用快捷键 F12（Mac：Cmd+Opt+I）打开开发者工具。")]),t._v(" "),s("li",[t._v("选择 "),s("code",[t._v("Sources（资源）")]),t._v(" 面板。")])]),t._v(" "),s("p",[t._v("如果你是第一次这么做，那你应该会看到下面这个样子：")]),t._v(" "),s("p",[s("img",{attrs:{src:e(349),alt:"image-20210214202250215"}})]),t._v(" "),s("p",[t._v("切换按钮 会打开文件列表的选项卡。")]),t._v(" "),s("p",[t._v("让我们在预览树中点击和选择 "),s("code",[t._v("hello.js")]),t._v("。这里应该会如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:e(350),alt:"image-20210214202330736"}})]),t._v(" "),s("p",[t._v("资源（Sources）面板包含三个部分：")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("文件导航（File Navigator）")]),t._v(" 区域列出了 HTML、JavaScript、CSS 和包括图片在内的其他依附于此页面的文件。Chrome 扩展程序也会显示在这。")]),t._v(" "),s("li",[s("strong",[t._v("代码编辑（Code Editor）")]),t._v(" 区域展示源码。")]),t._v(" "),s("li",[s("strong",[t._v("JavaScript 调试（JavaScript Debugging）")]),t._v(" 区域是用于调试的，我们很快就会来探索它。")])]),t._v(" "),s("p",[t._v("现在你可以再次点击切换按钮 隐藏资源列表来给代码腾出一些空间。")]),t._v(" "),s("h2",{attrs:{id:"控制台-console"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#控制台-console"}},[t._v("#")]),t._v(" 控制台（Console）")]),t._v(" "),s("p",[t._v("如果我们按下 Esc，下面会出现一个控制台，我们可以输入一些命令然后按下 Enter 来执行。")]),t._v(" "),s("p",[t._v("语句执行完毕之后，其执行结果会显示在下面。")]),t._v(" "),s("p",[t._v("例如，"),s("code",[t._v("1+2")]),t._v(" 将会返回 "),s("code",[t._v("3")]),t._v("，"),s("code",[t._v('hello("debugger")')]),t._v(" 函数什么也不返回，因此结果是 "),s("code",[t._v("undefined")]),t._v("：")]),t._v(" "),s("p",[s("img",{attrs:{src:e(351),alt:"image-20210214202358754"}})]),t._v(" "),s("h2",{attrs:{id:"断点-breakpoints"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#断点-breakpoints"}},[t._v("#")]),t._v(" 断点（Breakpoints）")]),t._v(" "),s("p",[t._v("我们来看看 "),s("a",{attrs:{href:"https://zh.javascript.info/article/debugging-chrome/debugging/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("示例页面"),s("OutboundLink")],1),t._v(" 发生了什么。在 "),s("code",[t._v("hello.js")]),t._v(" 中，点击第 "),s("code",[t._v("4")]),t._v(" 行。是的，就点击数字 "),s("code",[t._v('"4"')]),t._v(" 上，不是点击代码。")]),t._v(" "),s("p",[t._v("恭喜你！你已经设置了一个断点。现在，请在第 "),s("code",[t._v("8")]),t._v(" 行的数字上也点击一下。")]),t._v(" "),s("p",[t._v("看起来应该是这样的（蓝色是你应该点击的地方）：")]),t._v(" "),s("p",[s("img",{attrs:{src:e(352),alt:"image-20210214202416441"}})]),t._v(" "),s("p",[s("strong",[t._v("断点")]),t._v(" 是调试器会自动暂停 JavaScript 执行的地方。")]),t._v(" "),s("p",[t._v("当代码被暂停时，我们可以检查当前的变量，在控制台执行命令等等。换句话说，我们可以调试它。")]),t._v(" "),s("p",[t._v("我们总是可以在右侧的面板中找到断点的列表。当我们在数个文件中有许多断点时，这是非常有用的。它允许我们：")]),t._v(" "),s("ul",[s("li",[t._v("快速跳转至代码中的断点（通过点击右侧面板中的对应的断点）。")]),t._v(" "),s("li",[t._v("通过取消选中断点来临时禁用对应的断点。")]),t._v(" "),s("li",[t._v("通过右键单击并选择移除来删除一个断点。")]),t._v(" "),s("li",[t._v("……等等。")])]),t._v(" "),s("p",[s("strong",[t._v("条件断点")])]),t._v(" "),s("p",[t._v("在行号上 "),s("strong",[t._v("右键单击")]),t._v(" 允许你创建一个 "),s("strong",[t._v("条件")]),t._v(" 断点。只有当给定的表达式为真（即满足条件）时才会被触发。")]),t._v(" "),s("p",[t._v("当我们需要在特定的变量值或参数的情况下暂停程序执行时，这种调试方法就很有用了。")]),t._v(" "),s("h2",{attrs:{id:"debugger-命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#debugger-命令"}},[t._v("#")]),t._v(" Debugger 命令")]),t._v(" "),s("p",[t._v("我们也可以使用 "),s("code",[t._v("debugger")]),t._v(" 命令来暂停代码，像这样：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" phrase "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("Hello, ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("debugger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// <-- 调试器会在这停止")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("say")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("phrase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("当我们在一个代码编辑器中并且不想切换到浏览器在开发者工具中查找脚本来设置断点时，这真的是非常方便。")]),t._v(" "),s("h2",{attrs:{id:"暂停并查看"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#暂停并查看"}},[t._v("#")]),t._v(" 暂停并查看")]),t._v(" "),s("p",[t._v("在我们的例子中，"),s("code",[t._v("hello()")]),t._v(" 函数在页面加载期间被调用，因此激活调试器的最简单的方法（在我们已经设置了断点后）就是 —— 重新加载页面。因此让我们按下 F5（Windows，Linux）或 Cmd+R（Mac）吧。")]),t._v(" "),s("p",[t._v("设置断点之后，程序会在第 4 行暂停执行：")]),t._v(" "),s("p",[s("img",{attrs:{src:e(353),alt:"image-20210214202448351"}})]),t._v(" "),s("p",[t._v("请打开右侧的信息下拉列表（箭头指示出的地方）。这里允许你查看当前的代码状态：")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[s("code",[t._v("察看（Watch）")]),t._v(" —— 显示任意表达式的当前值。")])]),t._v(" "),s("p",[t._v("你可以点击加号 "),s("code",[t._v("+")]),t._v(" 然后输入一个表达式。调试器将随时显示它的值，并在执行过程中自动重新计算该表达式。")])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("调用栈（Call Stack）")]),t._v(" —— 显示嵌套的调用链。")])]),t._v(" "),s("p",[t._v("此时，调试器正在 "),s("code",[t._v("hello()")]),t._v(" 的调用链中，被 "),s("code",[t._v("index.html")]),t._v(" 中的一个脚本调用（这里没有函数，因此显示 “anonymous”）")]),t._v(" "),s("p",[t._v("如果你点击了一个堆栈项，调试器将跳到对应的代码处，并且还可以查看其所有变量。")])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("作用域（Scope）")]),t._v(" —— 显示当前的变量。")])]),t._v(" "),s("p",[s("code",[t._v("Local")]),t._v(" 显示当前函数中的变量，你还可以在源代码中看到它们的值高亮显示了出来。")]),t._v(" "),s("p",[s("code",[t._v("Global")]),t._v(" 显示全局变量（不在任何函数中）。")]),t._v(" "),s("p",[t._v("这里还有一个 "),s("code",[t._v("this")]),t._v(" 关键字，目前我们还没有学到它，不过我们很快就会学习它了。")])])]),t._v(" "),s("h2",{attrs:{id:"跟踪执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跟踪执行"}},[t._v("#")]),t._v(" 跟踪执行")]),t._v(" "),s("p",[t._v("现在是 "),s("strong",[t._v("跟踪")]),t._v(" 脚本的时候了。")]),t._v(" "),s("p",[t._v("在右侧面板的顶部是一些关于跟踪脚本的按钮。让我们来使用它们吧。")]),t._v(" "),s("ul",[s("li",[t._v("—— “恢复（Resume）”：继续执行，快捷键 F8。")])]),t._v(" "),s("p",[t._v("继续执行。如果没有其他的断点，那么程序就会继续执行，并且调试器不会再控制程序。我们点击它一下之后，我们会看到这样的情况：")]),t._v(" "),s("p",[s("img",{attrs:{src:e(354),alt:"image-20210214202555529"}})]),t._v(" "),s("p",[t._v("执行恢复了，执行到 "),s("code",[t._v("say()")]),t._v(" 函数中的另外一个断点后暂停在了那里。看一下右边的 “Call stack”。它已经增加了一个调用信息。我们现在在 "),s("code",[t._v("say()")]),t._v(" 里面。")]),t._v(" "),s("ul",[s("li",[t._v("—— “下一步（Step）”：运行下一条指令，快捷键 F9。")])]),t._v(" "),s("p",[t._v("运行下一条语句。如果我们现在点击它，"),s("code",[t._v("alert")]),t._v(" 会被显示出来。一次接一次地点击此按钮，整个脚本的所有语句会被逐个执行。")]),t._v(" "),s("ul",[s("li",[t._v("—— “跨步（Step over）”：运行下一条指令，但 "),s("strong",[t._v("不会进入到一个函数中")]),t._v("，快捷键 F10。")])]),t._v(" "),s("p",[t._v("跟上一条命令“下一步（Step）”类似，但如果下一条语句是函数调用则表现不同。这里的函数指的是：不是内置的如 "),s("code",[t._v("alert")]),t._v(" 函数等，而是我们自己写的函数。“下一步（Step）”命令进入函数内部并在第一行暂停执行，而“跨步（Step over）”在无形中执行函数调用，跳过了函数的内部。执行会在该函数执行后立即暂停。如果我们对该函数的内部执行不感兴趣，这命令会很有用。")]),t._v(" "),s("ul",[s("li",[t._v("—— “步入（Step into）”，快捷键 F11。")])]),t._v(" "),s("p",[t._v("和“下一步（Step）”类似，但在异步函数调用情况下表现不同。如果你刚刚才开始学 JavaScript，那么你可以先忽略此差异，因为我们还没有用到异步调用。至于之后，只需要记住“下一步（Step）”命令会忽略异步行为，例如 "),s("code",[t._v("setTimeout")]),t._v("（计划的函数调用），它会过一段时间再执行。而“步入（Step into）”会进入到代码中并等待（如果需要）。详见 "),s("a",{attrs:{href:"https://developers.google.com/web/updates/2018/01/devtools#async",target:"_blank",rel:"noopener noreferrer"}},[t._v("DevTools 手册"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("ul",[s("li",[t._v("—— “步出（Step out）”：继续执行到当前函数的末尾，快捷键 Shift+F11。")])]),t._v(" "),s("p",[t._v("继续执行代码并停止在当前函数的最后一行。当我们使用 偶然地进入到一个嵌套调用，但是我们又对这个函数不感兴趣时，我们想要尽可能的继续执行到最后的时候是非常方便的。")]),t._v(" "),s("ul",[s("li",[t._v("—— 启用/禁用所有的断点。")])]),t._v(" "),s("p",[t._v("这个按钮不会影响程序的执行。只是一个批量操作断点的开/关。")]),t._v(" "),s("ul",[s("li",[t._v("—— 启用/禁用出现错误时自动暂停脚本执行。")])]),t._v(" "),s("p",[t._v("当启动此功能并且开发者工具是打开着的时候，任何一个脚本的错误都会导致该脚本执行自动暂停。然后我们可以分析变量来看一下什么出错了。因此如果我们的脚本因为错误挂掉的时候，我们可以打开调试器，启用这个选项然后重载页面，查看一下哪里导致它挂掉了和当时的上下文是什么。")]),t._v(" "),s("p",[s("strong",[t._v("Continue to here")])]),t._v(" "),s("p",[t._v("在代码中的某一行上右键，在显示的关联菜单（context menu）中点击一个非常有用的名为 “Continue to here” 的选项。")]),t._v(" "),s("p",[t._v("当你想要向前移动很多步到某一行为止，但是又懒得设置一个断点时非常的方便。")]),t._v(" "),s("h2",{attrs:{id:"日志记录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#日志记录"}},[t._v("#")]),t._v(" 日志记录")]),t._v(" "),s("p",[t._v("想要输出一些东西到控制台上？"),s("code",[t._v("console.log")]),t._v(" 函数可以满足你。")]),t._v(" "),s("p",[t._v("例如：将从 "),s("code",[t._v("0")]),t._v(" 到 "),s("code",[t._v("4")]),t._v(" 的值输出到控制台上：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打开控制台来查看")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("普通用户看不到这个输出，它是在控制台里面的。要想看到它 —— 要么打开开发者工具中的 Console（控制台）选项卡，要么在一个其他的选项卡中按下 Esc：这会在下方打开一个控制台。")]),t._v(" "),s("p",[t._v("如果我们在代码中有足够的日志记录，那么我们可以从记录中看到刚刚发生了什么，而不需要借助调试器。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("我们可以看到，这里有 3 种方式来暂停一个脚本：")]),t._v(" "),s("ol",[s("li",[t._v("一个断点。")]),t._v(" "),s("li",[s("code",[t._v("debugger")]),t._v(" 语句。")]),t._v(" "),s("li",[t._v("一个错误（如果开发者工具是打开状态，并且按钮 是开启的状态）。")])]),t._v(" "),s("h2",{attrs:{id:"参考文献"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[t._v("#")]),t._v(" 参考文献")]),t._v(" "),s("p",[t._v("https://zh.javascript.info/debugging-chrome")])])}),[],!1,null,null,null);a.default=v.exports}}]);