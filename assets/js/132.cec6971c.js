(window.webpackJsonp=window.webpackJsonp||[]).push([[132],{460:function(t,l,v){"use strict";v.r(l);var _=v(13),i=Object(_.a)({},(function(){var t=this,l=t.$createElement,v=t._self._c||l;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"修饰符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[t._v("#")]),t._v(" 修饰符")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("protected")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("子类与基类在同一包中")]),t._v("：被声明为 protected 的变量、方法和构造器能被同一个包中的任何其他类访问")]),t._v(" "),v("li",[v("strong",[t._v("子类与基类不在同一包中")]),t._v("：那么在子类中，子类实例可以访问其从基类继承而来的 protected 方法，而不能访问基类实例的protected方法。")])])]),t._v(" "),v("li",[v("p",[t._v("static修饰符")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("静态变量：")])]),t._v(" "),v("p",[t._v("static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("静态方法：")])]),t._v(" "),v("p",[t._v("static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。")])])])]),t._v(" "),v("li",[v("p",[t._v("final修饰符")]),t._v(" "),v("ul",[v("li",[t._v('final 表示"最后的、最终的"含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。')]),t._v(" "),v("li",[t._v("final 修饰符通常和 static 修饰符一起使用来创建类常量。")]),t._v(" "),v("li",[t._v("父类中的 final 方法可以被子类继承，但是不能被子类重写。声明 final 方法的主要目的是防止该方法的内容被修改。")])])]),t._v(" "),v("li",[v("p",[t._v("abstract修饰符")]),t._v(" "),v("ul",[v("li",[t._v("抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。")]),t._v(" "),v("li",[t._v("抽象方法不能被声明成 final 和 static。")]),t._v(" "),v("li",[t._v("任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。")]),t._v(" "),v("li",[t._v("如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。")])])]),t._v(" "),v("li",[v("p",[t._v("synchronized修饰符")]),t._v(" "),v("ul",[v("li",[t._v("如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。")])])]),t._v(" "),v("li",[v("p",[t._v("transient修饰符")]),t._v(" "),v("ul",[v("li",[t._v("序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量，该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。")])])]),t._v(" "),v("li",[v("p",[t._v("volatile修饰符")]),t._v(" "),v("ul",[v("li",[t._v("volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。一个 volatile 对象引用可能是 null")])])])])])}),[],!1,null,null,null);l.default=i.exports}}]);