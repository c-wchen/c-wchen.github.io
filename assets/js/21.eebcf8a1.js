(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{235:function(t,a,n){t.exports=n.p+"assets/img/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzg0MTM2Ng==,size_16,color_FFFFFF,t_70.df852d9f.png"},272:function(t,a,n){t.exports=n.p+"assets/img/webp.98d25277.png"},423:function(t,a,n){"use strict";n.r(a);var s=n(13),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("在编译器、JVM 或者 CPU 出于优化目的，都会对指令进行重排序，提高CPU处理速度。")]),t._v(" "),s("h2",{attrs:{id:"什么是重排序-happen-before"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是重排序-happen-before"}},[t._v("#")]),t._v(" 什么是重排序(happen-before)")]),t._v(" "),s("p",[t._v("假设我们写了一个 Java 程序，包含一系列的语句，我们会默认期望这些语句的实际运行顺序和写的代码顺序一致。\n但实际上，编译器、JVM 或者 CPU 都有可能出于优化等目的，对于实际指令执行的顺序进行调整，这就是重排序。\n重排序的好处：提高处理速度")]),t._v(" "),s("p",[s("img",{attrs:{src:n(235),alt:"img"}})]),t._v(" "),s("p",[t._v("图中左侧是 3 行 Java 代码，右侧是这 3 行代码可能被转化成的指令。\n可以看出 a = 100 对应的是 Load a、Set to 100、Store a，意味着从主存中读取 a 的值，然后把值设置为 100，并存储回去，同理， b = 5 对应的是下面三行 Load b、Set to 5、Store b，最后的 a = a + 10，对应的是 Load a、Set to 110、Store a。\n如果你仔细观察，会发现这里有两次“Load a”和两次“Store a”，说明存在一定的重排序的优化空间。\n经过重排序之后，情况如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:n(235),alt:"img"}})]),t._v(" "),s("p",[t._v("重排序后， a 的两次操作被放到一起，指令执行情况变为 Load a、Set to 100、Set to 110、 Store a。\n下面和 b 相关的指令不变，仍对应 Load b、 Set to 5、Store b。\n可以看出，重排序后 a 的相关指令发生了变化，节省了一次 Load a 和一次 Store a。\n重排序通过减少执行指令，从而提高整体的运行速度，这就是重排序带来的优化和好处。")]),t._v(" "),s("h2",{attrs:{id:"重排序的-3-种情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重排序的-3-种情况"}},[t._v("#")]),t._v(" 重排序的 3 种情况")]),t._v(" "),s("p",[t._v("（1）编译器优化")]),t._v(" "),s("p",[t._v("编译器（包括 JVM、JIT 编译器等）出于优化的目的，例如当前有了数据 a，把对 a 的操作放到一起效率会更高，避免读取 b 后又返回来重新读取 a 的时间开销，此时在编译的过程中会进行一定程度的重排。不过重排序并不意味着可以任意排序，它需要需要保证重排序后，不改变单线程内的语义，否则如果能任意排序的话，程序早就逻辑混乱了。\n（2）CPU 重排序")]),t._v(" "),s("p",[t._v("CPU 同样会有优化行为，这里的优化和编译器优化类似，都是通过乱序执行的技术来提高整体的执行效率。\n所以即使之前编译器不发生重排，CPU 也可能进行重排，我们在开发中，一定要考虑到重排序带来的后果。\n（3） 内存的“重排序”")]),t._v(" "),s("p",[t._v("内存系统内不存在真正的重排序，但是内存会带来看上去和重排序一样的效果，所以这里的“重排序”打了双引号。\n由于内存有缓存的存在，在 JMM 里表现为主存和本地内存，而主存和本地内存的内容可能不一致，所以这也会导致程序表现出乱序的行为。\n举个例子，线程 1 修改了 a 的值，但是修改后没有来得及把新结果写回主存或者线程 2 没来得及读到最新的值，所以线程 2 看不到刚才线程 1 对 a 的修改，此时线程 2 看到的 a 还是等于初始值。但是线程 2 却可能看到线程 1 修改 a 之后的代码执行效果，表面上看起来像是发生了重顺序。")]),t._v(" "),s("h2",{attrs:{id:"dcl问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dcl问题"}},[t._v("#")]),t._v(" DCL问题")]),t._v(" "),s("p",[t._v("如何不添加volatile禁止重排序，在多线程中可能导致"),s("code",[t._v("new Singleton")]),t._v("先申请内存再初始化。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("public class Singleton "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    private "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Singleton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    private "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" Singleton instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    public Singleton "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instance"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("null"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Singleton"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("class"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instance"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("null"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Singleton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:n(272),alt:"img"}})]),t._v(" "),s("h2",{attrs:{id:"参考文献"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[t._v("#")]),t._v(" 参考文献")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://blog.csdn.net/weixin_37841366/article/details/113086438",target:"_blank",rel:"noopener noreferrer"}},[t._v("什么是指令重排序？为什么要重排序？序"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);